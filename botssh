#!/bin/bash
clear
#--------@GATESCCN-----------#
source ShellBot.sh
touch lista
[[ -z $1 ]] && {
    clear && echo "TOKEN" && return 0
}
[[ ! -e RESET ]] && touch RESET
api_bot=$1
ShellBot.init --token "$api_bot" --monitor --flush
ShellBot.username

# - FUNCIONES DEL MENU 
menu() {
    local msg
        msg="=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=\n"
        msg+="HOLA <b>${message_from_first_name[$id]}</b>, BIENVENIDO\n"
        msg+="=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=\n"
        msg+="HAZ TU PRUEBA AHORA MISMO!\n\n"
        msg+="=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=\n"
        msg+="<b>üëáüèΩPAISES DISPONIBLES üëáüèΩ</b>\n"
        msg+="=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=√ó=\n"
        msg+="<b>üî¥ BOLIVIA üü£ COLOMBIA</b>\n"
        ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
        --text "$(echo -e $msg)" \
        --reply_markup "$keyboard1" \
        --parse_mode html
        return 0
}

# - FUNCION DE CREAR SSH TIEMPO
criarteste() {
    [[ $(grep -wc ${callback_query_from_id} lista) != '0' ]] && {
      ShellBot.sendMessage --chat_id ${callback_query_message_chat_id} \
        --text "YA CREASTE TU PRUEBA HOY INTENTA EN 2 DIAS O COMPRA UN ACCESO"
      return 0
    }
    usuario=$(echo MANDARIN$(( RANDOM% + 250 )))
    senha=$((RANDOM% + 999999))
    limite='1'
    tempo='6'
    tuserdate=$(date '+%C%y/%m/%d' -d " +2 days")
    useradd -M -N -s /bin/false $usuario -e $tuserdate > /dev/null 2>&1
    (echo "$senha";echo "$senha") | passwd $usuario > /dev/null 2>&1
    echo "$senha" > /etc/SSHPlus/senha/$usuario
    echo "$usuario $limite" >> /root/usuarios.db
    echo "#!/bin/bash
pkill -f "$usuario"
userdel --force $usuario
grep -v ^$usuario[[:space:]] /root/usuarios.db > /tmp/ph ; cat /tmp/ph > /root/usuarios.db
rm /etc/SSHPlus/senha/$usuario > /dev/null 2>&1
rm -rf /etc/SSHPlus/userteste/$usuario.sh" > /etc/SSHPlus/userteste/$usuario.sh
    chmod +x /etc/SSHPlus/userteste/$usuario.sh
    at -f /etc/SSHPlus/userteste/$usuario.sh now + $tempo hour > /dev/null 2>&1
    echo ${callback_query_from_id} >> lista
    # - ENVIA O SSH
    ShellBot.sendMessage --chat_id ${callback_query_message_chat_id} \
    --text "$(echo -e "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n        <b>‚úÖ CREADO CON EXITO MI KING‚úÖ</b>\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n            üë§ USUARIO: <code>$usuario</code>\n               üîë CONTRASE√ëA: <code>$senha</code>\n             ‚è∞ Expira en: $tempo Horas")\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n   \n <b>SOPORTE LAS 24 HORAS , @GATESCCN</b>\n  ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨" \
    --parse_mode html
    return 0
}

#enviar app
enviarapp() {
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "‚ôªÔ∏èSOLICITUD DE ENV√çO..."
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/base.apk" \
    return 0
    
}
    
#enviar sks (TESTEANDO)
enviarsks() {
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "‚ôªÔ∏è ENVIANDO ARQUIVOS SKS..."
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/CLARO.sks" \
    return 0
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/VIVO.sks" \
    return 0
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/TIM.sks" \
    return 0
    
}
    
#enviar ehi   (TESTEANDO)
enviarehi() {
    ShellBot.answerCallbackQuery --callback_query_id ${callback_query_id[$id]} \
        --text "‚ôªÔ∏è ENVIANDO ARQUIVOS EHI..."
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/CLARO.ehi" \
    return 0
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/VIVO.ehi" \
    return 0
    ShellBot.sendDocument --chat_id ${callback_query_message_chat_id} \
        --document "@/root/TIM.ehi" \
    return 0


    }

#informacion de usuarios 
infouser () {
	ShellBot.sendMessage --chat_id ${message_chat_id[$id]} \
	--text "$(echo -e "Nome:  ${message_from_first_name[$(ShellBot.ListUpdates)]}\nUser: @${message_from_username[$(ShellBot.ListUpdates)]:-null}")\nID: ${message_from_id[$(ShellBot.ListUpdates)]} " \
	--parse_mode html
	return 0
}

unset botao1
botao1=''
ShellBot.InlineKeyboardButton --button 'botao1' --line 1 --text '‚ôªÔ∏è GENERAR PRUEBA ‚ôªÔ∏è' --callback_data 'gerarssh'
ShellBot.InlineKeyboardButton --button 'botao1' --line 2 --text 'üî∞ DESCARGAR APLICACI√ìNüî∞' --callback_data 'appenviar'
ShellBot.InlineKeyboardButton --button 'botao1' --line 3 --text 'üî∞ ARCHIVOS SKSüî∞' --callback_data 'sksenviar'
ShellBot.InlineKeyboardButton --button 'botao1' --line 3 --text 'üî∞ARCHIVOS EHIüî∞' --callback_data 'ehienviar'
ShellBot.InlineKeyboardButton --button 'botao1' --line 4 --text 'üë®‚ÄçüíªCOMPR√â AQU√çüë®‚Äçüíª'  --callback_data '2' --url 't.me/GATESCCN' # privado   EDITABLE
ShellBot.InlineKeyboardButton --button 'botao1' --line 5 --text '‚ö†Ô∏è T√âRMINOS ‚ö†Ô∏è'  --callback_data '3' --url 'https://bitbin.it/WUwitdNa/raw/' # TERMINOS ETC EDITABLE
ShellBot.regHandleFunction --function criarteste --callback_data gerarssh
ShellBot.regHandleFunction --function enviarapp --callback_data appenviar
ShellBot.regHandleFunction --function enviarsks --callback_data sksenviar
ShellBot.regHandleFunction --function enviarehi --callback_data ehienviar
unset keyboard1
keyboard1="$(ShellBot.InlineKeyboardMarkup -b 'botao1')"
while :; do
   [[ "$(date +%d)" != "$(cat RESET)" ]] && {
   	echo $(date +%d) > RESET
   	echo ' ' > lista
   }
  ShellBot.getUpdates --limit 100 --offset $(ShellBot.OffsetNext) --timeout 24
  for id in $(ShellBot.ListUpdates); do
    (
      ShellBot.watchHandle --callback_data ${callback_query_data[$id]}
      comando=(${message_text[$id]})
      [[ "${comando[0]}" = "/menu"  || "${comando[0]}" = "/start" ]] && menu
      [[ "${comando[0]}" = "/id"  ]] && infouser
    ) &
  done
done
